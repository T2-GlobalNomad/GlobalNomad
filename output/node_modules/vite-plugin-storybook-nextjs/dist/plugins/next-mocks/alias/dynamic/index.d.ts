import React, { JSX } from 'react';

type ComponentModule<P = Record<string, unknown>> = {
    default: React.ComponentType<P>;
};
declare type LoaderComponent<P = Record<string, unknown>> = Promise<React.ComponentType<P> | ComponentModule<P>>;
declare type Loader<P = Record<string, unknown>> = (() => LoaderComponent<P>) | LoaderComponent<P>;
type LoaderMap = {
    [module: string]: () => Loader<unknown>;
};
type LoadableGeneratedOptions = {
    webpack?(): unknown;
    modules?(): LoaderMap;
};
type DynamicOptionsLoadingProps = {
    error?: Error | null;
    isLoading?: boolean;
    pastDelay?: boolean;
    retry?: () => void;
    timedOut?: boolean;
};
type DynamicOptions<P = Record<string, unknown>> = LoadableGeneratedOptions & {
    loading?: (loadingProps: DynamicOptionsLoadingProps) => JSX.Element | null;
    loader?: Loader<P> | LoaderMap;
    loadableGenerated?: LoadableGeneratedOptions;
    ssr?: boolean;
};
declare function noSSR<P = Record<string, unknown>>(): React.ComponentType<P>;
/**
 * This function lets you dynamically import a component.
 * It uses [React.lazy()](https://react.dev/reference/react/lazy) with [Suspense](https://react.dev/reference/react/Suspense) under the hood.
 *
 * Read more: [Next.js Docs: `next/dynamic`](https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#nextdynamic)
 */
declare function dynamic<P = Record<string, unknown>>(dynamicOptions: DynamicOptions<P> | Loader<P>, options?: DynamicOptions<P>): React.ComponentType<P>;

export { type LoaderComponent, dynamic as default, noSSR };
